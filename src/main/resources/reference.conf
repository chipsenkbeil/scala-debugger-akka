scala-debugger {
  task-runner {
    # Maximum number of virtual machines to use the task manager
    max-virtual-machines = 0 # Non-positive integer results in unbounded limit

    # Maximum threads to spin up per task runner
    threads = 0 # Non-positive integer results in using JVM cores
  }

  # Represents the data to retrieve during an event
  messages {
    # =========================================================================
    # = DEFAULT IMPLEMENTATIONS
    # =========================================================================

    #
    # Guide to configuration:
    #
    # 1. Provide the case-sensitive name for a zero-argument function
    #
    # 2. Provide the final type in a string for a function whose return value
    #    will not have a function invoked on it
    #
    # 3. Place a type or chain in an array to signify that the function returns
    #    an array whose individual elements should have that type or chain
    #    applied to (can put multiple elements in array to produce multiple
    #    outputs per function return value)
    #
    # 4. Provide a type in the form of "this.<function>(self)" to invoke the
    #    specified function of the parent on the element returned by the
    #    zero-argument function
    #
    #      e.g.
    #           myParentFunction {
    #             myChildFunction = "this.increment(self)"
    #           }
    #
    #    Note, if specified in an array, will apply the function to each
    #    individual element in the array.
    #
    #    To specify a type, add a colon followed by the type.
    #
    #      e.g.
    #           myParentFunction {
    #             myChildFunction = "this.increment(self): Int"
    #           }
    #

    # TODO: How do I indicate that I want to call something like...
    #
    #   stackFrame.getValues(stackFrame.visibleVariables)
    #
    # and add it to the array to create (LocalVariable, Value)?
    #

    # Represents the default type configuration for all messages
    default-type {
      name      = "String"
      signature = "String"
    }

    # Represents the default location configuration for all messages
    default-location {
      lineNumber  = "Int"
      sourceName  = "String"
      sourcePath  = "String"
    }

    # Represents the default local variable configuration for all messages
    default-local-variable {
      isArgument  = "Boolean"
      name        = "String"
      signature   = "String"
      type        = ${scala-debugger.messages.default-type}
    }

    # Represents the default field configuration for all messages
    default-field {
      isTransient = "Boolean"
      isVolatile  = "Boolean"
      type        = ${scala-debugger.messages.default-type}
    }

    # Represents the default value configuration for all messages
    default-value {
      type  = ${scala-debugger.messages.default-type}
    }

    # Represents the default method configuration for all messages
    default-method {
      allLineLocations  = [ ${scala-debugger.messages.default-location} ]
      arguments         = [ ${scala-debugger.messages.default-local-variable} ]
      location          = ${scala-debugger.messages.default-location}
      returnType        = ${scala-debugger.messages.default-type}
      variables         = [ ${scala-debugger.messages.default-local-variable} ]
    }

    # Represents the default stack frame configuration for all messages
    default-stack-frame {
      getArgumentValues = [ ${scala-debugger.messages.default-value} ]
      location          = ${scala-debugger.messages.default-location}
      visibleVariables  = [ ${scala-debugger.messages.default-local-variable} ]
    }

    # Represents the default thread configuration for all messages
    default-thread {
      frames  = [ ${scala-debugger.messages.default-stack-frame} ]
      name    = "String"
      status  = "Int"
    }

    # =========================================================================
    # = MESSAGE IMPLEMENTATIONS
    # =========================================================================

    access-watchpoint {
      field         = ${scala-debugger.messages.default-field}
      valueCurrent  = ${scala-debugger.messages.default-value}
    }

    breakpoint {
      thread    = ${scala-debugger.messages.default-thread}
      location  = ${scala-debugger.messages.default-location}
    }

    class-prepare {

    }

    class-unload {

    }

    exception {

    }

    method-entry {

    }

    method-exit {

    }

    modification-watchpoint {

    }

    step {

    }

    thread-start {

    }

    thread-death {

    }

    vm-start {

    }

    vm-death {

    }

    vm-disconnect {

    }
  }
}